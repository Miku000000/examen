import { isPlatformServer } from '@angular/common';
import { ChangeDetectionStrategy, Component, effect, ElementRef, inject, Injector, input, PLATFORM_ID, Renderer2, runInInjectionContext, } from '@angular/core';
import { injectNgIconPostProcessor, injectNgIconPreProcessor, } from '../../providers/features/csp';
import { injectLogger } from '../../providers/features/logger';
import { injectNgIconConfig } from '../../providers/icon-config.provider';
import { injectNgIconLoader, injectNgIconLoaderCache, } from '../../providers/icon-loader.provider';
import { injectNgIcons } from '../../providers/icon.provider';
import { coerceLoaderResult } from '../../utils/async';
import { coerceCssPixelValue } from '../../utils/coercion';
import { toPropertyName } from '../../utils/format';
import * as i0 from "@angular/core";
export class NgIcon {
    constructor() {
        /** Access the global icon config */
        this.config = injectNgIconConfig();
        /** Access the icons */
        this.icons = injectNgIcons();
        /** Access the icon loader if defined */
        this.loader = injectNgIconLoader();
        /** Access the icon cache if defined */
        this.cache = injectNgIconLoaderCache();
        /** Access the pre-processor */
        this.preProcessor = injectNgIconPreProcessor();
        /** Access the post-processor */
        this.postProcessor = injectNgIconPostProcessor();
        /** Access the injector */
        this.injector = inject(Injector);
        /** Access the renderer */
        this.renderer = inject(Renderer2);
        /** Determine the platform we are rendering on */
        this.platform = inject(PLATFORM_ID);
        /** Access the element ref */
        this.elementRef = inject(ElementRef);
        /** Access the logger */
        this.logger = injectLogger();
        /** Define the name of the icon to display */
        this.name = input();
        /** Define the svg of the icon to display */
        this.svg = input();
        /** Define the size of the icon */
        this.size = input(this.config.size, { transform: coerceCssPixelValue });
        /** Define the stroke-width of the icon */
        this.strokeWidth = input(this.config.strokeWidth);
        /** Define the color of the icon */
        this.color = input(this.config.color);
        // update the icon anytime the name or svg changes
        effect(() => this.updateIcon());
    }
    ngOnDestroy() {
        this.svgElement = undefined;
    }
    async updateIcon() {
        const name = this.name();
        const svg = this.svg();
        // if the svg is defined, insert it into the template
        if (svg !== undefined) {
            this.setSvg(svg);
            return;
        }
        if (name === undefined) {
            return;
        }
        const propertyName = toPropertyName(name);
        for (const icons of [...this.icons].reverse()) {
            if (icons[propertyName]) {
                // insert the SVG into the template
                this.setSvg(icons[propertyName]);
                return;
            }
        }
        // if there is a loader defined, use it to load the icon
        if (this.loader) {
            const result = await this.requestIconFromLoader(name);
            // if the result is a string, insert the SVG into the template
            if (result !== null) {
                this.setSvg(result);
                return;
            }
        }
        // if there is no icon with this name warn the user as they probably forgot to import it
        this.logger.warn(`No icon named ${name} was found. You may need to import it using the withIcons function.`);
    }
    setSvg(svg) {
        // if we are on the server, simply innerHTML the svg as we don't have the
        // level of control over the DOM that we do on the client, in otherwords
        // the approach we take to insert the svg on the client will not work on the server
        if (isPlatformServer(this.platform)) {
            this.elementRef.nativeElement.innerHTML = svg;
            // mark this component as server side rendered
            this.elementRef.nativeElement.setAttribute('data-ng-icon-ssr', '');
            return;
        }
        // if this was previously server side rendered, we should check if the svg is the same
        // if it is, we don't need to do anything
        if (this.elementRef.nativeElement.hasAttribute('data-ng-icon-ssr')) {
            // if it is different, we need to remove the server side rendered flag
            this.elementRef.nativeElement.removeAttribute('data-ng-icon-ssr');
            // retrieve the svg element
            this.svgElement =
                this.elementRef.nativeElement.querySelector('svg') ??
                    undefined;
            if (this.elementRef.nativeElement.innerHTML === svg) {
                return;
            }
        }
        // remove the old element
        if (this.svgElement) {
            this.renderer.removeChild(this.elementRef.nativeElement, this.svgElement);
        }
        // if the svg is empty, don't insert anything
        if (svg === '') {
            return;
        }
        const template = this.renderer.createElement('template');
        this.renderer.setProperty(template, 'innerHTML', this.preProcessor(svg));
        this.svgElement = template.content.firstElementChild;
        this.postProcessor(this.svgElement);
        // insert the element into the dom
        this.renderer.appendChild(this.elementRef.nativeElement, this.svgElement);
    }
    /**
     * Request the icon from the loader.
     * @param name The name of the icon to load.
     * @returns The SVG content for a given icon name.
     */
    requestIconFromLoader(name) {
        return new Promise(resolve => {
            runInInjectionContext(this.injector, async () => {
                // if we have a cache, check if the icon is already loaded (i.e, it is a string)
                if (this.cache) {
                    const cachedResult = this.cache.get(name);
                    if (typeof cachedResult === 'string') {
                        resolve(cachedResult);
                        return;
                    }
                    // it may be a promise, so we need to await it
                    if (cachedResult instanceof Promise) {
                        const result = await cachedResult;
                        resolve(result);
                        return;
                    }
                }
                const promise = coerceLoaderResult(this.loader(name));
                // store the promise in the cache so if we get repeated calls (e.g. in a loop) before the loader has resolved
                // then don't call the loader function multiple times
                this.cache?.set(name, promise);
                // await the result of the promise
                const result = await promise;
                // if we have a cache, store the result
                this.cache?.set(name, result);
                resolve(result);
            });
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: NgIcon, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "18.2.0", type: NgIcon, isStandalone: true, selector: "ng-icon", inputs: { name: { classPropertyName: "name", publicName: "name", isSignal: true, isRequired: false, transformFunction: null }, svg: { classPropertyName: "svg", publicName: "svg", isSignal: true, isRequired: false, transformFunction: null }, size: { classPropertyName: "size", publicName: "size", isSignal: true, isRequired: false, transformFunction: null }, strokeWidth: { classPropertyName: "strokeWidth", publicName: "strokeWidth", isSignal: true, isRequired: false, transformFunction: null }, color: { classPropertyName: "color", publicName: "color", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "style.--ng-icon__stroke-width": "strokeWidth()", "style.--ng-icon__size": "size()", "style.color": "color()" } }, ngImport: i0, template: '', isInline: true, styles: [":host{display:inline-block;width:var(--ng-icon__size, 1em);height:var(--ng-icon__size, 1em);line-height:initial;vertical-align:initial;overflow:hidden}:host ::ng-deep svg{width:inherit;height:inherit;vertical-align:inherit}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.0", ngImport: i0, type: NgIcon, decorators: [{
            type: Component,
            args: [{ selector: 'ng-icon', template: '', standalone: true, changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[style.--ng-icon__stroke-width]': 'strokeWidth()',
                        '[style.--ng-icon__size]': 'size()',
                        '[style.color]': 'color()',
                    }, styles: [":host{display:inline-block;width:var(--ng-icon__size, 1em);height:var(--ng-icon__size, 1em);line-height:initial;vertical-align:initial;overflow:hidden}:host ::ng-deep svg{width:inherit;height:inherit;vertical-align:inherit}\n"] }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,